package bonzai.automator;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.Stack;

import javax.swing.JFrame;

public class Ladder {	
	public static void main(String[] args) throws FileNotFoundException {
		//I am a bad programmer and I hardcoded this in another place (Automator.java)
		//Make sure to update both if you are stupid and change this path
		File file = new File("ladderinput.txt");

		if (!file.exists()) {
			System.out.println("Cannot find ladderinput.txt");
			System.out.println("Please run the automator to generate this file");
			return;
		}

		Scanner scanner = new Scanner(file);

		Stack<bonzai.Jar> aiStack = new Stack<>();
		Stack<bonzai.Jar> discarded = new Stack<>();

		System.out.println("Loading AIs");
		while (scanner.hasNextLine()) {
			String aiPath = scanner.nextLine();
			System.out.println("     " + aiPath);
			try {
				aiStack.push(new lazers.Jar(new File(aiPath)));
			} catch (Exception e) {
				System.out.println("Could not load " + aiPath);
			}
		}


		scanner.close();

		List<File> scenarios = new ArrayList<>();
		//Read all the scenario files
		File directory = new File("scenarios");
		//Add the first one twice (to 0)
		scenarios.add(directory.listFiles()[0]);
		for (File f : directory.listFiles()) {
			scenarios.add(f);
		}

		System.out.println("How many AIs do you want to run at once?  (2-6)");
		Scanner input = new Scanner(System.in);
		String countString = input.nextLine();
		int count = 2;
		try {
			count = Integer.parseInt(countString);
		} catch (Exception e) {
			System.out.println("Interpreting vague answer as 2");
		}
		if (count < 2) { count = 2; }
		if (count > 6) { count = 6; }


		System.out.println("Which map? (Press 0 to repeat last map)");
		for (int i = 0; i < scenarios.size(); i++) {
			System.out.println(i + ". " + scenarios.get(i).getName());
		}
		String mapString = input.nextLine();
		int map = 0;
		try {
			map = Integer.parseInt(mapString);
		} catch (Exception e) {
			System.out.println("Interpreting vague answer as 0");
		}
		if (map < 0) { map = 0; }
		if (map >= scenarios.size()) { map = scenarios.size()-1; }



		if (count == 3) {
			System.out.println("Starting tournament");
			System.out.println("Do you want to (1) Convert ladderinput.txt to tournament.txt, or (2) load from tournament.txt?");
			String line = input.nextLine();
			if (line.equals("1")) {
				System.out.println("CONVERTING...");
				tournament(tournamentLoad("ladderinput.txt"),scenarios,map);
			} else {
				tournament(tournamentLoad("tournament.txt"),scenarios,map);
			}

			return;
		}

		//Starting next match in 3 2 1 0...
		countdown();

		while (!aiStack.isEmpty()) {

			saveState(aiStack, discarded);
			//lotsOfSpaces();

			System.out.println("It is safe to kill this process.  The tournament state has been saved.");
			System.out.println("AIs Remaining:  " + aiStack.size());

			System.out.println();
			System.out.println();
			System.out.println();

		}
	}

	public static void tournament(ArrayList<ArrayList<ArrayList<bonzai.Jar>>> allAIS, List<File> scenarios, int map) {
		ArrayList<ArrayList<bonzai.Jar>> high = allAIS.get(0);
		ArrayList<ArrayList<bonzai.Jar>> med  = allAIS.get(1);
		ArrayList<ArrayList<bonzai.Jar>> low  = allAIS.get(2);

		//OPEN VISUALIZER(S)
		Visualizer v = new Visualizer(high);
		JFrame frame = new JFrame("Bonzai - High Bracket");
		frame.setSize(300,500);
		frame.setLocation(0, 0);
		frame.add(v);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setVisible(true);

		//OPEN VISUALIZER(S)
		Visualizer v1 = new Visualizer(med);
		JFrame frame1 = new JFrame("Bonzai - Medium Bracket");
		frame1.setSize(300,500);
		frame1.setLocation(300, 0);
		frame1.add(v1);
		frame1.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame1.setVisible(true);

		//OPEN VISUALIZER(S)
		Visualizer v2 = new Visualizer(low);
		JFrame frame2 = new JFrame("Bonzai - Low Bracket");
		frame2.setSize(300,500);
		frame2.setLocation(600, 0);
		frame2.add(v2);
		frame2.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame2.setVisible(true);

		for (int round = 0; round <= 3; round++) {
			//Get the ai's
			for (int level = 0; level < 3; level++) { //high,med,low
				ArrayList<ArrayList<bonzai.Jar>> ais = allAIS.get(level);
				for (int i = 0; i < ais.get(round).size(); i+=3) {
					v.repaint();
					v1.repaint();
					v2.repaint();

					//Did we already do this match?
					if (round < 3) {
						if (ais.get(round+1).size()-1 >= i / 3) {
							System.out.println("Already did match!");
							continue;
						}
					}

					//Save the state
					saveState(high,med,low);

					//Grab this many AI's
					List<bonzai.Jar> jars = new ArrayList<bonzai.Jar>();
					for (int o = 0; o < 3; o++) {
						jars.add(ais.get(round).get(i+o));
					}


					//The simulator likes exactly 6 entries.  Lets top it off
					while (jars.size() < 6) { jars.add(null); }

					System.out.println("**************");
					System.out.println("* NEXT MATCH *");
					System.out.println("************* ");
					for (bonzai.Jar jar : jars) {
						if (jar == null) { continue; }
						System.out.print(Automator.pad(jar.name(), 15));
					}
					System.out.println();
					System.out.println();
					System.out.println();

					//Lets load up the scenario
					//java -jar snowbound.jar -run [scenario] [jar/null] [jar/null] [jar/null] [jar/null] [jar/null] [jar/null]
					String jarString = "";
					for (bonzai.Jar j: jars) {
						if (j == null) { jarString += " null"; }
						else { jarString += " " + j.file().getPath(); }
					}
					try {
						String exec = "java -jar lazers.jar -run " + scenarios.get(map) + jarString;
						//System.out.println(exec);
						//Starting next match in 3 2 1 0...
						countdown();
						Process p = Runtime.getRuntime().exec(exec);
						System.out.println("Waiting for simulation to end");

						//Wait for the GUI to print the winner
						Scanner resultScanner = new Scanner(p.getInputStream());
						int result = -1;
						int second = -1;
						int third = -1;

						while (true) {
							try {
								String l = resultScanner.nextLine();
								String[] line = l.split(" ");
								System.out.println(l);
								if (line[0].equals("RESULT")) {
									//Try to get the result
									result = Integer.parseInt(line[1]);
									second = Integer.parseInt(line[2]);
									third = Integer.parseInt(line[3]);
									break;
								}
							} catch (Exception e) {
								System.out.println("Unable to detect winner!");
								break;
							}
						}
						p.destroy();

						if (result == -1 || second == -1 || third == -1) { System.out.println("Stalemate detected"); i-=3;}
						else {
							System.out.println("Winner: " + jars.get(result).name());
							System.out.println("Second: " + jars.get(second).name());
							System.out.println("Third: " + jars.get(third).name());
						}

						//Add everything to either discarded, or remaining
						for (int o = 0; o < jars.size(); o++) {
							bonzai.Jar jar = jars.get(o);
							if (jar == null) { continue; }

							//Winner moves on (IF we had -1, repeat game)
							if (o == result) { ais.get(round+1).add(jar); }

							//Mid moves onto the next down
							if (o == second && level+1 <= 2) { allAIS.get(level+1).get(round).add(jar); }

							//low moves onto 2 next down
							if (o == third && level+2 <= 2) { allAIS.get(level+2).get(round).add(jar); }

						}


					} catch (Exception e) {
						System.out.println("Couldn't load up this simulation.  Sorry");
						i-=3;
						e.printStackTrace();
					}
				}
			}
		}
	}

	public static void saveState(Stack<bonzai.Jar> remaining, Stack<bonzai.Jar> discarded) {
		//This stack loops from the bottom to the top
		//Keep that in mind when creating the new file
		String remainingData = "";
		for (bonzai.Jar jar : remaining) {
			remainingData += "\n" + jar.file().getPath();
		}

		//This part is forward, load it normally
		//Jars go from the remaining stack to the discarded stack
		String discardedData = "";
		for (bonzai.Jar jar : discarded) {
			discardedData = jar.file().getPath() + "\n" + discardedData;
		}

		try {
			PrintWriter pw = new PrintWriter("ladderinput.txt");
			pw.print(remainingData);
			pw.close();

			pw = new PrintWriter("ladderdiscarded.txt");
			pw.print(discardedData);
			pw.close();
		} catch (FileNotFoundException e) {
			System.out.println("ERROR SAVING FILES!  You may have it open in another process");
			e.printStackTrace();
		}

	}

	public static ArrayList<ArrayList<ArrayList<bonzai.Jar>>> tournamentLoad(String path) {
		ArrayList<ArrayList<bonzai.Jar>> high = new ArrayList<ArrayList<bonzai.Jar>>();
		ArrayList<ArrayList<bonzai.Jar>> med = new ArrayList<ArrayList<bonzai.Jar>>();
		ArrayList<ArrayList<bonzai.Jar>> low = new ArrayList<ArrayList<bonzai.Jar>>();

		//Total of 3 tiers + 1 champ...
		for (int i = 0; i < 4; i++) {
			high.add(new ArrayList<bonzai.Jar>());
			med.add(new ArrayList<bonzai.Jar>());
			low.add(new ArrayList<bonzai.Jar>());
		}

		try {
			Scanner s = new Scanner(new File(path));
			if (path.equals("ladderinput.txt")) {
				//just load 27 lines
				ArrayList<String> loaded = new ArrayList<>();
				for (int i = 0; i < 27; i++) {
					loaded.add(s.nextLine());
				}
				
				//I am tired and want to go to bed
				high.get(0).add(new lazers.Jar(new File(loaded.get(0))));
				high.get(0).add(new lazers.Jar(new File(loaded.get(9))));
				high.get(0).add(new lazers.Jar(new File(loaded.get(18))));
				
				high.get(0).add(new lazers.Jar(new File(loaded.get(3))));
				high.get(0).add(new lazers.Jar(new File(loaded.get(12))));
				high.get(0).add(new lazers.Jar(new File(loaded.get(21))));
				
				high.get(0).add(new lazers.Jar(new File(loaded.get(6))));
				high.get(0).add(new lazers.Jar(new File(loaded.get(15))));
				high.get(0).add(new lazers.Jar(new File(loaded.get(24))));
				//----------------------------------------------------------
				high.get(0).add(new lazers.Jar(new File(loaded.get(1))));
				high.get(0).add(new lazers.Jar(new File(loaded.get(10))));
				high.get(0).add(new lazers.Jar(new File(loaded.get(19))));
				
				high.get(0).add(new lazers.Jar(new File(loaded.get(4))));
				high.get(0).add(new lazers.Jar(new File(loaded.get(13))));
				high.get(0).add(new lazers.Jar(new File(loaded.get(22))));
				
				high.get(0).add(new lazers.Jar(new File(loaded.get(7))));
				high.get(0).add(new lazers.Jar(new File(loaded.get(16))));
				high.get(0).add(new lazers.Jar(new File(loaded.get(25))));
				//-----------------------------------------------------------
				high.get(0).add(new lazers.Jar(new File(loaded.get(2))));
				high.get(0).add(new lazers.Jar(new File(loaded.get(11))));
				high.get(0).add(new lazers.Jar(new File(loaded.get(20))));
				
				high.get(0).add(new lazers.Jar(new File(loaded.get(5))));
				high.get(0).add(new lazers.Jar(new File(loaded.get(14))));
				high.get(0).add(new lazers.Jar(new File(loaded.get(23))));
				
				high.get(0).add(new lazers.Jar(new File(loaded.get(8))));
				high.get(0).add(new lazers.Jar(new File(loaded.get(17))));
				high.get(0).add(new lazers.Jar(new File(loaded.get(26))));
				
			} else {
				//Read in whatever we can until we hit the end of the file
				int round = 0;
				while (s.hasNextLine()) {
					String line = s.nextLine();
					if (line.equals("NEXTROUND")) {
						round++;
						System.out.println("NEXT ROUND!");
						continue;
					}

					if (line.length() == 0) { continue; }
					System.out.print("Loaded HIGH ai: ");
					high.get(round).add(new lazers.Jar(new File(line)));
					System.out.println(high.get(round).get(high.get(round).size()-1).name());

					line = s.nextLine();
					if (line.length() > 0) {
						System.out.print("Loaded MID: ");
						med.get(round).add(new lazers.Jar(new File(line)));
						System.out.println(med.get(round).get(med.get(round).size()-1).name());
					}

					line = s.nextLine();
					if (line.length() > 0) {
						System.out.print("Loaded LOW ai: ");
						low.get(round).add(new lazers.Jar(new File(line)));
						System.out.println(low.get(round).get(low.get(round).size()-1).name());
					}
				}
			}

		} catch (Exception e) {
			System.out.println("Error loading!");
			e.printStackTrace();
		}

		ArrayList<ArrayList<ArrayList<bonzai.Jar>>> tournament = new ArrayList<ArrayList<ArrayList<bonzai.Jar>>>();
		tournament.add(high);
		tournament.add(med);
		tournament.add(low);

		return tournament;
	}


	public static void saveState(ArrayList<ArrayList<bonzai.Jar>> high,ArrayList<ArrayList<bonzai.Jar>> med,ArrayList<ArrayList<bonzai.Jar>> low) {

		try {
			PrintWriter pw = new PrintWriter("tournament.txt");
			//Print off everything there is
			for (int i = 0; i < high.size(); i++) {
				for (int j = 0; j < high.get(i).size(); j++) {
					try {
						pw.println(high.get(i).get(j).file().getPath());

						//Try medium
						String medLine = "";
						if (j < med.get(i).size()) { medLine = med.get(i).get(j).file().getPath(); }
						pw.println(medLine);

						//Try low
						String lowLine = "";
						if (j < low.get(i).size()) { lowLine = low.get(i).get(j).file().getPath(); }
						pw.println(lowLine);
					} catch (Exception e) {
						System.out.println("ERROR SAVING STATE!  Could not use file!");
					}
				}
				pw.println("NEXTROUND");
			}
			pw.close();
		} catch (Exception e) {
			System.out.println("SEVERE ERROR.  Could not save state!");
		}

	}


	public static void countdown() {
		/*System.out.print("Starting next match in ");
		for (int i = 3; i >= 0; i--) {
			System.out.print(i + " ");
			try {
				Thread.sleep(1000);
			} catch (Exception e) {}
		}
		System.out.println();*/
		System.out.println("Press enter to start next match");
		Scanner s = new Scanner(System.in);
		s.nextLine();
	}

	public static void lotsOfSpaces() {
		for (int i = 0; i < 50; i++) {
			System.out.println();
		}
	}
}
